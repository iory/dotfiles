# -*- mode: sh; ... -*-

export EDITOR="emacs"
if [[ ${DISPLAY} == ":0" ]] ; then
    export EDITOR="emacsclient"
    alias emacs-shell='emacs -nw -q -f shell'
    alias e='emacsclient -a ""'
    # alias emacs='emacsclient -a ""'
fi

export PYTHONSTARTUP=~/.pythonstartup
alias py='ipython --no-confirm-exit'
alias ipy='ipython --no-confirm-exit'
alias ipython='ipython --no-confirm-exit'

alias sl='ls'
alias la='ls -a'
alias lsf='ls -F'

alias ..="cd .."
alias ..2="cd ../.."
alias ..3="cd ../../.."
alias ..4="cd ../../../../"
alias ..5="cd ../../../../.."

alias ghc='stack ghc'
alias ghci='stack ghci'
alias runhaskell='stack runhaskell'

# alias grep="ag"

case ${OSTYPE} in
     linux*)
     # sudo apt-get install xsel
     alias pbcopy='xsel --clipboard --input'
     alias open="gnome-open"
esac

# ----------------------
# Git Aliases
# ----------------------
alias ga='git add'
# alias gaa='git add .'
# alias gaaa='git add -A'
alias gap='git add -p'
alias gb='git branch'
# alias gbd='git branch -d '
# alias gc='git commit'
# alias gca="git commit --amend"
# alias gci="git commit"
alias gcm='git commit -m'
alias gco='git checkout'
alias gcob='git checkout -b'
alias gcom='git checkout master'
alias gd='git diff'
alias gda='git diff HEAD'
# alias gi='git init'
alias gl='git log --oneline'
alias gln="git log --name-only"
alias glp="git log -p"
alias glg='git log --graph --oneline --decorate --all'
alias gld='git log --pretty=format:"%h %ad %s" --date=short --all'
alias gm='git merge --no-ff'
alias gp='git pull'
alias gss='git status -s'
# alias gst='git status'
alias gst='git stash'
# alias gist="git stash"
alias gstl='git stash list'
alias gstp='git stash pop'
alias gstd='git stash drop'
alias gr='git remote'
alias grv='git remote -v'
alias gans="git diff -w --no-color | git apply --cached --ignore-whitespace"

# ----------------------
# Git Function
# ----------------------
# Git log find by commit message
function glf() { git log --all --grep="$1"; }
function git-pull() {
  local repository=${1:-origin}
  local branch=${2:-$(git rev-parse --abbrev-ref HEAD)}
  git pull origin $branch
}
alias gps=git-pull

function git-pull-force() {
  local branch=$(git rev-parse --abbrev-ref HEAD)
  git-checkout-force tmp 2> /dev/null
  if [ $? != 0 ]; then return 1; fi
  git branch -D $branch > /dev/null 2>&1
  if [ $? != 0 ]; then return 1; fi
  git fetch
  if [ $? != 0 ]; then return 1; fi
  git checkout $branch
}
alias gplf=git-pull-force

alias gdn='git diff --name-only'
for n in $(seq 50); do
  alias gd$n="git diff HEAD~$n"
  alias gdn$n="git diff --name-only HEAD~$n"
done

alias gs='echo ""; echo "*********************************************"; echo -e "   DO NOT FORGET TO PULL BEFORE COMMITTING"; echo "*********************************************"; echo ""; git status'

if which hub >/dev/null 2>&1; then
    alias git='hub'
    compdef hub=git
fi
alias g='git'

# for c++
alias methashell='rlwrap -c methashell'

# for Lisp
if [ "$EMACS" ]; then
    # pass
else
    alias clisp="rlwrap -c clisp"
fi

# for ROS
if [ "$EMACS" ]; then
    # pass
else
    alias roseus="rlwrap -c -b '(){}.,;|' -a -pGREEN roseus"
    alias irteus='rlwrap -c irteus'
    alias irteusgl='rlwrap -c irteusgl'
fi

# ROS alias
alias rs='rostopic list'

case ${OSTYPE} in
    # for Mac only alias
    darwin*)
        alias lsusb='system_profiler SPUSBDataType'
esac

alias chrome='google-chrome'

dic () {
  w3m "http://ejje.weblio.jp/content/$1" | grep "用例"
}
alias sha1='echo -n "${1}" | openssl sha1 | sed "s/^.* //"'
alias up="cd ..; ls -l"

jj () {
    if [ $1 ]; then
        JUMPDIR=$(find . -type d -maxdepth 1 | grep $1 | tail -1)
        if [[ -d $JUMPDIR && -n $JUMPDIR ]]; then
            cd $JUMPDIR
        else
            echo "directory not found"
        fi
    fi
}

cleanup () {
    find . -type d -maxdepth 2 -empty -exec rmdir -v {} \; 2>/dev/null
    find . -type d -maxdepth 2 -empty -exec rmdir -v {} \; 2>/dev/null
}

case ${OSTYPE} in
    linux*)
        alias f="gnome-open ."
        alias o="gnome-open"
        ;;
    darwin*)
        alias f="open ."
        alias o="open"
        cdf () {
            target=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
            if [ "$target" != "" ]
            then
                cd "$target"
                pwd
            else
                echo 'No Finder window found' >&2
            fi
        }


esac
